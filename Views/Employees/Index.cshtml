@model PaginatedList<DemoWeb.Models.Employees>

@{
	ViewData["Title"] = "Employees Details";
}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script>
	$(document).ready(function () {
		$('#searchInput').on('keydown', function (e) {
			if (e.key === 'Enter') {
				e.preventDefault(); // Prevent the default form submission
				
				// Send AJAX request
				$.ajax({
						type: 'GET',
						url: getUrl('Index', 'Employees'), // Use getUrl function for dynamic URL building
						data: , // Pass form data

					})
						.done((response) => {
							console.log('Success:', response);
							// Add any success handling logic here
						})
						.fail((err) => {
							console.error('Error:', err);
							// Add any error handling logic here
						})
						.always(() => {
							console.log('Request completed.');
						});
				});
				}
			});
		});
</script>

<h1 class="page-title">Employees Details</h1>

<!-- Search and Filter Section -->
<body>
	<div class="container-fluid">
		<div class="row mb-4">
			<div class="col-md-6">
				<form asp-action="Index" method="get" id="searchForm" class="form-inline">
					<input type="text" name="SearchString" id="searchInput" class="form-control" value="@ViewData["CurrentFilter"]" placeholder="Search employees..." />
					<button type="submit" class="btn btn-primary ml-2">
						<i class="bi bi-search"></i> Search
					</button>
				</form>
			</div>


			<div class="col-md-2 text-right">
				<a asp-action="Create" class="btn btn-success">
					<i class="bi bi-plus-circle"></i> Add New
				</a>
			</div>
		</div>

		<div class="row">
			@foreach (var item in Model)
			{
				<div class="col-md-4 mb-4">
					<div class="card employee-card">
						<div class="card-body">
							<h5 class="card-title">@Html.DisplayFor(modelItem => item.EmployeeName)</h5>
							<p class="card-text">
								<strong>Email:</strong> @Html.DisplayFor(modelItem => item.EmployeeEmail) <br />
								<strong>Role:</strong> @Html.DisplayFor(modelItem => item.EmployeeRole) <br />
								<strong>Address:</strong> @Html.DisplayFor(modelItem => item.EmployeeAddress) <br />
								<strong>Joined:</strong> @Html.DisplayFor(modelItem => item.EmployeeJoinedDate)
							</p>
							<div class="btn-group">
								<a asp-action="Edit" asp-route-id="@item.EmployeeId" class="btn btn-sm btn-outline-primary">Edit</a>
								<a asp-action="Details" asp-route-id="@item.EmployeeId" class="btn btn-sm btn-outline-info">Details</a>
								<a asp-action="Delete" asp-route-id="@item.EmployeeId" class="btn btn-sm btn-outline-danger">Delete</a>
							</div>
						</div>
					</div>
				</div>
			}
		</div>

		<div class="row">
			<div class="col-md-12 text-right">
				<div class="pagination-controls">
					<a asp-action="Index"
					   asp-route-pageNumber="@(Model.PageIndex - 1)"
					   asp-route-currentFilter="@ViewData["CurrentFilter"]"
					   class="btn btn-outline-secondary @(!Model.HasPreviousPage ? "disabled" : "")">
						Previous
					</a>
					<a asp-action="Index"
					   asp-route-pageNumber="@(Model.PageIndex + 1)"
					   asp-route-currentFilter="@ViewData["CurrentFilter"]"
					   class="btn btn-outline-secondary @(!Model.HasNextPage ? "disabled" : "")">
						Next
					</a>
				</div>
			</div>
		</div>
	</div>

</body>



